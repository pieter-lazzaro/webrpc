{{define "client"}}

{{- if .Services}}
//
// Client
//

{{- range .Services}}
@Injectable()
export class {{.Name}} {

  private path = '/rpc/{{.Name}}/'

  constructor(private rpc: RpcService) { }

  private url(name: string): string {
    return this.path + name
  }

  {{range .Methods}}
  {{.Name | methodName}} = ({{. | methodInputs}}): {{. | methodOutputs}} => {
    return this.rpc.call<{{. | methodArgumentOutputInterfaceName}},{{. | methodArgumentInputInterfaceName}}>(
      this.url('{{.Name}}'),
      {{- if .Inputs | len}}
      args,
      {{- else}}
      {},
      {{end}}
      options,
    ).pipe(
      map((_data) => {
        return {
        {{- $outputsCount := .Outputs|len -}}
        {{- range $i, $output := .Outputs}}
          {{$output | newOutputArgResponse}}{{listComma $i $outputsCount}}
        {{- end}}
        };
      }),
    );
  }
  {{end}}
}
{{end -}}

@NgModule({
  imports: [
    HttpClientModule,
  ],
})
export class WebRPCModule {

  static forRoot(url: string) {
    return {
      ngModule: WebRPCModule,
      providers: [
        {provide: WEB_RPC_URL, useValue: url},
        RpcService,
        {{- range .Services}}
        {{.Name}},
        {{end -}}
      ]
    }
  }
 }

{{end -}}
{{end}}
