// Code generated by statik. DO NOT EDIT.

// Package contains static assets.
package embed

var	Asset = "PK\x03\x04\x14\x00\x08\x00\x00\x00:\x9cXO\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0e\x00	\x00client.ts.tmplUT\x05\x00\x01\xa0\xfc\xb1]{{define \"client\"}}\n\n{{- if .Services}}\n//\n// Client\n//\n\n{{- range .Services}}\n@Injectable({\n  providedIn: 'root'\n})\nexport class {{.Name}} {\n\n  private path = '/rpc/{{.Name}}/'\n\n  constructor(private rpc: RpcService) { }\n\n  private url(name: string): string {\n    return this.path + name\n  }\n\n  {{range .Methods}}\n  {{.Name | methodName}} = ({{. | methodInputs}}): {{. | methodOutputs}} => {\n    return this.rpc.call<{{. | methodArgumentOutputInterfaceName}},{{. | methodArgumentInputInterfaceName}}>(\n      this.url('{{.Name}}'),\n      {{- if .Inputs | len}}\n      args,\n      {{- else}}\n      {},\n      {{end}}\n      options,\n    ).pipe(\n      map((_data) => {\n        return {\n        {{- $outputsCount := .Outputs|len -}}\n        {{- range $i, $output := .Outputs}}\n          {{$output | newOutputArgResponse}}{{listComma $i $outputsCount}}\n        {{- end}}\n        };\n      }),\n    );\n  }\n  {{end}}\n}\n{{end -}}\n{{end -}}\n{{end}}\nPK\x07\x08\x82h\xf8\xc8\xa8\x03\x00\x00\xa8\x03\x00\x00PK\x03\x04\x14\x00\x08\x00\x00\x00\xf5\xa2YO\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x16\x00	\x00client_helpers.ts.tmplUT\x05\x00\x01\xcfY\xb3]{{define \"client_helpers\"}}\n\nconst defaultRequestOptions = () => ({\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  observe: 'body' as 'body',\n  responseType: 'json' as 'json',\n  withCredentials: true,\n});\n\ninterface RequestOptions {\n  headers?: HttpHeaders | { [header: string]: string | string[]; };\n  params?: HttpParams | { [param: string]: string | string[]; };\n  observe?: 'body';\n  responseType?: 'json';\n  withCredentials?: boolean;\n}\n\nexport interface WebRPCOptions {\n  headers?: object;\n}\n\nexport interface WebRPCError extends Error {\n  code: string;\n  msg: string;\n	status: number;\n}\n\nconst buildOptions = (rpcOptions: WebRPCOptions = {}): RequestOptions => {\n  let options = defaultRequestOptions();\n\n  if (rpcOptions.headers) {\n    options.headers = {\n      ...options.headers,\n      ...rpcOptions.headers,\n    };\n  }\n\n  return options;\n};\n\nconst handleError = (error: WebRPCError) => {\n  return throwError(error);\n}\n\n\nexport const WEB_RPC_URL = new InjectionToken<string>('webrpc-url');\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RpcService {\n\n  constructor(private http: HttpClient, @Inject(WEB_RPC_URL) private url: string) { }\n\n  call<ResponseType, Arguments>(path: string, args: Arguments, rpcOptions?: WebRPCOptions ) {\n    const options = buildOptions(rpcOptions);\n    return this.http.post<ResponseType>(this.url + '/' + path, args, options).pipe(\n      map( (response) => {\n        return response;\n      }),\n      catchError(handleError),\n    );\n  }\n}\n\n@NgModule({\n  imports: [\n    HttpClientModule,\n  ],\n})\nexport class WebRPCModule {\n\n  static forRoot(url: string) {\n    return {\n      ngModule: WebRPCModule,\n      providers: [\n        {provide: WEB_RPC_URL, useValue: url},\n        RpcService,\n      ]\n    }\n  }\n }\n\n{{end}}\nPK\x07\x08\x97\x12\xe84\xeb\x06\x00\x00\xeb\x06\x00\x00PK\x03\x04\x14\x00\x08\x00\x00\x00O\x9cXO\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x11\x00	\x00proto.gen.ts.tmplUT\x05\x00\x01\xc6\xfc\xb1]{{- define \"proto\" -}}\n/* tslint:disable */\n// {{.Name}} {{.SchemaVersion}} {{.SchemaHash}}\n// --\n// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript\n// Do not edit by hand. Update your webrpc schema and re-generate.\n\nimport { Inject, Injectable, InjectionToken, NgModule } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams, HttpClientModule } from '@angular/common/http';\nimport { map, catchError } from 'rxjs/operators';\nimport { throwError, Observable } from 'rxjs';\n\n// WebRPC description and code-gen version\nexport const WebRPCVersion = \"{{.WebRPCVersion}}\"\n\n// Schema version of your RIDL schema\nexport const WebRPCSchemaVersion = \"{{.SchemaVersion}}\"\n\n// Schema hash generated from your RIDL schema\nexport const WebRPCSchemaHash = \"{{.SchemaHash}}\"\n\n{{template \"types\" .}}\n\n{{- if .TargetOpts.Client}}\n  {{template \"client_helpers\" .}}\n  {{template \"client\" .}}\n{{- end}}\n\n{{- end}}\nPK\x07\x08Q\"Z\x83\xb1\x03\x00\x00\xb1\x03\x00\x00PK\x03\x04\x14\x00\x08\x00\x00\x00\xd1\x88XO\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0d\x00	\x00types.ts.tmplUT\x05\x00\x01\x1b\xda\xb1]{{define \"types\"}}\n//\n// Types\n//\n\n{{- if .Messages -}}\n{{range .Messages -}}\n\n{{if .Type | isEnum -}}\n{{$enumName := .Name}}\nexport enum {{$enumName}} {\n{{- range $i, $field := .Fields}}\n  {{- if $i}},{{end}}\n  {{$field.Name}} = '{{$field.Name}}'\n{{- end}}\n}\n{{end -}}\n\n{{- if .Type | isStruct  }}\nexport interface {{.Name | interfaceName}} {\n  {{- range .Fields}}\n  {{if . | exportableField -}}{{. | exportedJSONField}}{{if .Optional}}?{{end}}: {{.Type | fieldType}}{{- end -}}\n  {{- end}}\n}\n{{end -}}\n{{end -}}\n{{end -}}\n\n{{if .Services}}\n{{- range .Services}}\nexport interface {{.Name | serviceInterfaceName}} {\n{{- range .Methods}}\n  {{.Name | methodName}}({{. | methodInputs}}): {{. | methodOutputs}}\n{{- end}}\n}\n\n{{range .Methods -}}\nexport interface {{. | methodArgumentInputInterfaceName}} {\n{{- range .Inputs}}\n  {{.Name}}{{if .Optional}}?{{end}}: {{.Type | fieldType}}\n{{- end}}\n}\n\nexport interface {{. | methodArgumentOutputInterfaceName}} {\n{{- range .Outputs}}\n  {{.Name}}{{if .Optional}}?{{end}}: {{.Type | fieldType}}\n{{- end}}  \n}\n{{end}}\n\n{{- end}}\n{{end -}}\n{{end}}\nPK\x07\x08=A*\xed=\x04\x00\x00=\x04\x00\x00PK\x01\x02\x14\x03\x14\x00\x08\x00\x00\x00:\x9cXO\x82h\xf8\xc8\xa8\x03\x00\x00\xa8\x03\x00\x00\x0e\x00	\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x81\x00\x00\x00\x00client.ts.tmplUT\x05\x00\x01\xa0\xfc\xb1]PK\x01\x02\x14\x03\x14\x00\x08\x00\x00\x00\xf5\xa2YO\x97\x12\xe84\xeb\x06\x00\x00\xeb\x06\x00\x00\x16\x00	\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x81\xed\x03\x00\x00client_helpers.ts.tmplUT\x05\x00\x01\xcfY\xb3]PK\x01\x02\x14\x03\x14\x00\x08\x00\x00\x00O\x9cXOQ\"Z\x83\xb1\x03\x00\x00\xb1\x03\x00\x00\x11\x00	\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x81%\x0b\x00\x00proto.gen.ts.tmplUT\x05\x00\x01\xc6\xfc\xb1]PK\x01\x02\x14\x03\x14\x00\x08\x00\x00\x00\xd1\x88XO=A*\xed=\x04\x00\x00=\x04\x00\x00\x0d\x00	\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe4\x81\x1e\x0f\x00\x00types.ts.tmplUT\x05\x00\x01\x1b\xda\xb1]PK\x05\x06\x00\x00\x00\x00\x04\x00\x04\x00\x1e\x01\x00\x00\x9f\x13\x00\x00\x00\x00"
